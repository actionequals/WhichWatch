@page "/Watches"
@using ApiClient
@inject HttpClient Http
@inject IJSRuntime js
@inject NavigationManager NavigationManager

<h1>Watches</h1>
@if (aWatches == null) {
    <p><em>Loading...</em></p>
} else {
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Watch in aWatches) {
                <tr>
                    <td>@Watch.Name</td>
                    <td><a href="/EditWatch/@Watch.Key" class="btn btn-info">Edit</a></td>
                    <td><a @onclick="(() => DeleteWatch(Watch.Key))" class="btn btn-danger">Delete</a></td>
                </tr>
            }
        </tbody>
    </table>
    <a href="/AddWatch">Add a Watch..</a>
}

@code {
    public WatchDTO[] aWatches;

    protected override async Task OnInitializedAsync() {
        aWatches = await (new ActionEqualsApiRequest<WatchDTO>(Http, "Watches").GetAllAsync());
    }

    public async Task DeleteWatch(string key) {
        //check associations first.  A watch that is being watched by a witch cannot be deleted.
        var aWitches = await (new ActionEqualsApiRequest<WitchDTO>(Http, "Witches").GetAllAsync());
        bool prevented = false;
        foreach (var witch in aWitches) {
            if (witch.watching == key) {
                prevented = true;
                await js.InvokeVoidAsync("alert", $"Witch {witch.Name} is watching this watch so it cannot be deleted now.");
            }
        }
        if (!prevented) {
            bool confirm = await js.InvokeAsync<bool>("confirm", "Do you want to delete this Watch?");
            if (confirm) {
                await (new ActionEqualsApiRequest<WatchDTO>(Http, "Watches").Delete(key));
            }
            StateHasChanged();
            NavigationManager.NavigateTo("Watches", true);
        }
    }
}

